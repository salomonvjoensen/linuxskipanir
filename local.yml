---
- hosts: localhost
  become: yes

  tasks:
    - name: Check for setup complete flag file
      ansible.builtin.stat:
        path: /var/www/html/.setup_complete 
      register: setup_flag  # Store the result 

    - name: Initialize setup_complete flag (if file missing)
      ansible.builtin.set_fact:
        setup_complete: false 
      when: not setup_flag.stat.exists 

    - name: Gather credentials (if setup incomplete)
      block:  
        - vars_prompt:
          - name: mysql_user
            prompt: "Enter your desired MySQL username"
            private: no

          - name: mysql_password
            prompt: "Enter your desired MySQL password"
            private: no

          - name: anon_user
            prompt: "Enter your conn.php username (kjakdb access)"
            private: no

          - name: anon_password
            prompt: "Enter your conn.php password (kjakdb access)"
            private: no
      when: not setup_complete

    - name: Install Apache
      ansible.builtin.apt:
        name: apache2
        state: present
    - name: Start the apache2 services
      ansible.builtin.service:
        name: apache2
        state: started
        enabled: true

    - name: Create uploads folder
      ansible.builtin.file:
        path: /var/www/html/uploads
        state: directory
        owner: root
        group: root
        mode: '0777'

    - name: Copy web files
      ansible.builtin.copy:
        src: "www/{{ item }}"
        dest: /var/www/html/{{ item }} 
      with_items:
        - index.php
        - favicon.ico
        - style.css
        - script.js
        - create_thread.php
        - view_forum.php
        - view_thread.php

    - name: Create conn.php from template
      ansible.builtin.template:
        src: www/conn.php.j2
        dest: /var/www/html/conn.php 

    - name: Install MariaDB server
      ansible.builtin.apt:
        name: mariadb-server
        state: present

    - name: Start and enable MariaDB service
      ansible.builtin.service:
        name: mariadb
        state: started
        enabled: true

    - name: Ensure pip is installed
      ansible.builtin.apt:
        name: python3-pip
        state: present

    - name: Install PyMySQL
      ansible.builtin.pip:
        name: PyMySQL
        state: present

    - name: Create .my.cnf for MySQL authentication
      ansible.builtin.copy:
        dest: "~/.my.cnf"
        content: |
          [client]
          user={{ mysql_user }}
          password={{ mysql_password }}
        mode: '0600'
      when: not setup_complete  
      become: yes

    - name: Set root password for MySQL/MariaDB
      ansible.builtin.mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        login_user: root
        check_implicit_admin: yes
        host_all: yes
      when: not setup_complete  
      become: yes

    - name: Ensure the database 'kjakdb' exists
      community.mysql.mysql_db:
        name: kjakdb
        state: present
        login_user: "{{ mysql_user }}"
        login_password: "{{ mysql_password }}"

    - name: Ensure the kjakdb user exists with privileges
      ansible.builtin.mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: 'kjakdb.*:ALL'
        state: present
        when: not setup_complete
      become: yes

    - name: Copy SQL script to target machine
      ansible.builtin.copy:
        src: sql/kjakdb.sql
        dest: /tmp/kjakdb.sql

    - name: Import SQL script into kjakdb database
      ansible.builtin.mysql_db:
        name: kjakdb
        state: import
        target: /tmp/kjakdb.sql
      become: yes

    - name: Create update script from template
      ansible.builtin.template:
        src: sh/update_kjakdb.sh.j2
        dest: /tmp/update_kjakdb.sh
        mode: '0755' 

    - name: Execute the update script
      ansible.builtin.command:
        cmd: /tmp/update_kjakdb.sh
      when: not setup_complete
      become: yes

    - name: Create state file after initial setup
      ansible.builtin.file:
        path: /var/www/html/.setup_complete 
        state: touch
        mode: '0644' 
      when: not setup_complete

    - name: Set initial setup flag 
      ansible.builtin.set_fact:
        setup_complete: true